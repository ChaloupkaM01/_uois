import {
    Link,
    useParams
  } from "react-router-dom";
import { useEffect, useState } from "react";
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Card from 'react-bootstrap/Card';
import Table from 'react-bootstrap/Table';

import { useQueryGQL, LoadingError, Loading } from '../index';
import { root, rootGQL } from '../config';

/*
 * @param {{pkName}} holds value for unique entity identification
 * @return Future with response from gQL server
 */
export const Query{{tableName}}By{{pkName}}Large = ({{pkName}}) => 
    fetch(rootGQL, {
        method: 'POST', // *GET, POST, PUT, DELETE, etc.
        headers: {
            'Content-Type': 'application/json',
        },
        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
        redirect: 'follow', // manual, *follow, error
        body: JSON.stringify({"query": 
            `
            query {
                {{tableDescriptor['SQLTableName']}}ById({{pkName}}: ${id}) {
{% for name, item in tableDescriptor['locals'].items() %}
                    {{name}}
{%- endfor %}
{% for name, item in tableDescriptor['relations'].items() %}
                    {{name}} {
    {% for obj in getObjectItems(item['type']) %}
                        {{ obj }}
    {%- endfor %}
                    }
{%- endfor %}
                }
            }
            `        
        }) // body data type must match "Content-Type" header
    });    

/*
 * @param {{pkName}} holds value for unique entity identification
 * @return Future with response from gQL server
 */
export const Query{{tableName}}By{{pkName}}Medium = ({{pkName}}) => 
    fetch(rootGQL, {
        method: 'POST', // *GET, POST, PUT, DELETE, etc.
        headers: {
            'Content-Type': 'application/json',
        },
        cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
        redirect: 'follow', // manual, *follow, error
        body: JSON.stringify({"query": 
            `
            query {
                {{tableDescriptor['SQLTableName']}}ById({{pkName}}: ${id}) {
{%- for name, item in tableDescriptor['locals'].items() %}
                    {{name}}
{%- endfor %}
                }
            }
            `        
        }) // body data type must match "Content-Type" header
    });    

const entityRoot = root + '/{{tableDescriptor['SQLTableName']}}';

/*
 * @param props.id unique identification
 * @param props.name visual representation of item
 * @param props.label visual representation of item
 * @param props.children embeded items
 * @return 
 */
export const {{tableName}}Small = (props) =>  {
    if (props.name) {
        return (
            <Link to={entityRoot + `/${props.id}`}>{props.name}{props.children}</Link>
        )
    } else if (props.label) {
        return (
            <Link to={entityRoot + `/${props.id}`}>{props.label}{props.children}</Link>
        )
    } else {
        return (
            <Link to={entityRoot + `/${props.id}`}>{props.id}{props.children}</Link>
        )
    } 
}

/*
 * @param props holds all data needed for proper rendering
 * @return 
 */
export const {{tableName}}Medium = (props) =>  {
    return (
        <Card>
            <Card.Header className='bg-success bg-gradient text-white'>
                <Card.Title>Title of {{tableName}}</Card.Title>
            </Card.Header>
            <Card.Body>
                <ul class="list-group">
{%- for name, item in tableDescriptor['locals'].items() %}
                    <li class="list-group-item">{{name}} : { props.{{name}} }</li>
{%- endfor %}
                </ul>
            </Card.Body>
            <Card.Footer>
                {JSON.stringify(props)}
            </Card.Footer>
        </Card>
    ) 
}

/*
{%- for name, item in tableDescriptor['locals'].items() %}
 * @param props.{{name}} 
{%- endfor %}
 * @return 
 */
export const {{tableName}}TableRow = (props) =>  {
    return (
        <tr>
{%- for name, item in tableDescriptor['locals'].items() %}
            <td>{ props.{{name}} }</td>
{%- endfor %}
        </tr>
    ) 
}

/*
 * @return 
 */
export const {{tableName}}TableHeadRow = (props) =>  {
    return (
        <tr>
{%- for name, item in tableDescriptor['locals'].items() %}
            {%- if name == pkName %}
            <th><{{tableName}}Small {...props} /></th>
            {%- else %}
            <th>{{name}}</th>
            {%- endif %}
{%- endfor %}
        </tr>
    ) 
}

/*
 * @param props.data is array of {{tableName}}
 * @return 
 */
export const {{tableName}}Table = (props) =>  {
    const rows = props.data.map(
        (item, index) => <{{tableName}}TableRow key={'k' + index} {...item}/>
        );

    return (
        <Table>
            <thead>
                <{{tableName}}TableHeadRow />
            </thead>
            <tbody>
                {rows}
            </tbody>
        </Table>
    ) 
}

/*
 * @param props holds all data needed for proper rendering
 * @return 
 */
export const {{tableName}}Large = (props) =>  {
    return (
        <>
        <Row>
            <Col>
                <{{tableName}}Medium {...props}> 
                </{{tableName}}Medium> 
            </Col>
        </Row>
        </>
    ) 
}

/*
 * @param props holds all data needed for proper rendering
 * @return 
 */
export const {{tableName}}Fetching = (props) => {
    let queryFunc = Query{{tableName}}By{{pkName}}Large;
    if (props.with) {
        queryFunc = props.with;
    }
    let Component = {{tableName}}Large;
    if (props.as) {
        Component = props.as;
    }

    const [state, error] = useQueryGQL(props.id, Query{{tableName}}By{{pkName}}Large, (response) => response.data.{{tableName}}, [props.id])

    if (state !== null) {
        return <{{tableName}}Large {...state} />
    } else if (error !== null) {
        return <LoadingError error={error} />
    } else {
        return <Loading>{props.id}</Loading>
    }
}
    
/*
 * @param props holds extra properties
 * @return 
 */
export const {{tableName}}Page = (props) => {
    const { id } = useParams();

    return (
        <{{tableName}}Fetching {...props} id={id} />
    )    

}  